"""Generate datasets from SQL dump files."""

# Python imports.
from collections import defaultdict
import datetime
import os
import re

# User imports.
from . import file_generator
from . import parse_patient_entry
from . import save_patient_data


def main(dirSQLFiles, dirOutput, fileCodesToIgnore):
    """Generate flat file datasets by processing a set of SQL files containing patient medical data.

    Patient history data is assumed to be stored in a file called journal.sql within the SQL file directory. Within this
    file a patient's history is assumed to be recorded consecutively (i.e. patient P has all their records recorded
    one after the other). The processed files are then generated by a single pass through the journal.sql file,
    processing each patient's record one at a time (hence the need for all of a patients record to be stored
    consecutively in the journal.sql file to enable a single pass to be used). First the raw information
    about the patient is extracted by reading a number of lines from the journal.sql file. Then the different types of
    processing are performed to generate the patient's record in the different desired formats. The patient's processed
    record is then appended to each of the files storing the processed data.

    :param dirSQLFiles:         The location of the directory containing the SQL files of the patient data.
    :type dirSQLFiles:          str
    :param dirOutput:           The location of the directory where the processed flat files should be saved.
    :type dirOutput:            str
    :param fileCodesToIgnore:   The location of the file containing the codes to ignore.
    :type fileCodesToIgnore:    str

    """

    # Extract the list of regular expressions defining the codes to ignore.
    codesToIgnore = []
    with open(fileCodesToIgnore, 'r') as fidCodes:
        for line in fidCodes:
            codesToIgnore.append((line.strip()).replace('%', ".*"))
    codesToIgnore = re.compile('(' + '|'.join([i.replace('%', ".*") for i in codesToIgnore]) + ')')

    # Get the files for the SQL tables we're interested in. These would be the journal table and the patient table.
    fileJournalTable = os.path.join(dirSQLFiles, "journal.sql")
    filePatientTable = os.path.join(dirSQLFiles, "patient.sql")
    fileDiseaseTable = os.path.join(dirSQLFiles, "disease.sql")

    # Extract the patient demographics.
    patientData = {}
    with open(filePatientTable, 'r') as fidPatientTable:
        for line in fidPatientTable:
            if line[:6] == "insert":
                # Found a line containing patient details.
                line = line[84:]  # Strip of the SQL insert syntax at the beginning.
                line = line[:-3]  # Strip off the ");\n" at the end.
                chunks = line.split(',')
                patientID = chunks[0]
                DOB = chunks[1]
                patientGender = chunks[3]  # A '1' indicates a male and a '0' a female.
                patientData[patientID] = {"DOB": DOB, "Gender": patientGender}  # Records patient's demographics.

    # Identify the codes used in the dataset and whether they  have any data associated with them.
    # This will cause two passes through the patient data. However, without this the entire dataset will need to be
    # stored in memory, as no patient history can be written out without knowing all the codes in the dataset.
    count = 0  # TODO remove this
    uniqueCodes = set()  # The codes used in the dataset.
    codeAssociatedValues = defaultdict(lambda: {"Val1": False, "Val2": False})  # Value types associated with codes.
    with open(fileJournalTable, 'r') as fidJournalTable:
        for line in fidJournalTable:
            if line[:6] == "insert":
                # The line contains information about a row in the journal table.
                entries = parse_patient_entry.main(line)

                if entries:
                    # The entry on this line contained a code, so add the code to the set of unique codes if it is not
                    # being ignored.
                    code = entries[1]
                    if not codesToIgnore.match(code):
                        uniqueCodes.add(code)
                        codeAssociatedValues[code]["Val1"] |= float(entries[3]) != 0
                        codeAssociatedValues[code]["Val2"] |= float(entries[4]) != 0

                # TODO remove this
                count += 1
                if count > 10000:
                    break
                # TODO
    uniqueCodes = sorted(uniqueCodes)

    # Create the files to record the generated datasets in.
    outputFiles = file_generator.main(dirOutput, uniqueCodes, codeAssociatedValues)

    count = 0  # TODO remove this
    # Extract the information about each patient's history.
    currentPatient = None  # The ID of the patient who's record is currently being built.
    patientHistory = []  # The data for the current patient.
    with open(fileJournalTable, 'r') as fidJournalTable:
        for line in fidJournalTable:
            if line[:6] == "insert":
                # The line contains information about a row in the journal table.
                entries = parse_patient_entry.main(line)

                if entries:
                    # The entry on this line contained all the information needed to record it (for example the code was
                    # not missing), so get the details of this patient-code association.
                    patientID = entries[0]
                    code = entries[1]
                    date = datetime.datetime.strptime(entries[2], "%Y-%m-%d")  # Convert YYYY-MM-DD date to datetime.
                    value1 = float(entries[3])
                    value2 = float(entries[4])

                    if patientID != currentPatient and currentPatient:
                        # A new patient has been found and this is not the first line of the file, so record the old
                        # patient and reset the patient data for the new patient.
                        dateOfBirth = datetime.datetime.strptime(patientData[currentPatient]["DOB"], "%Y")
                        patientGender = patientData[currentPatient]["Gender"]
                        save_patient_data.main(
                            currentPatient, patientHistory, dateOfBirth, patientGender, outputFiles, uniqueCodes
                        )
                        patientHistory = []
                    currentPatient = patientID  # Update the current patient's ID to be this patient's.

                    # Add this patient-code association to the patient's history.
                    patientHistory.append({"Code": code, "Date": date, "Val1": value1, "Val2": value2})

                # TODO remove this
                count += 1
                if count > 10000:
                    break
        # Record the final patient's data.
        dateOfBirth = datetime.datetime.strptime(patientData[currentPatient]["DOB"], "%Y")
        patientGender = patientData[currentPatient]["Gender"]
        save_patient_data.main(currentPatient, patientHistory, dateOfBirth, patientGender, outputFiles, uniqueCodes)

    # Extract the patient disease information.
    with open(fileDiseaseTable, 'r') as fidDiseaseTable:
        for line in fidDiseaseTable:
            if line[:6] == "insert":
                # Found a line containing patient disease details.
                line = line[274:]  # Strip of the SQL insert syntax at the beginning.
                line = line[:-3]  # Strip off the ");\n" at the end.
                chunks = line.split(',')
                patientID = chunks[0]
                diseases = '\t'.join(chunks[1:])
                patientData[patientID]["Disease"] = diseases

    # Write out the patient demographic and disease details.
    filePatientDetails = os.path.join(dirOutput, "PatientDetails.tsv")
    with open(filePatientDetails, 'w') as fidPatientDetails:
        # Write out the header for the patient details.
        diseaseIndicators = "COPD\tStrokeOrCerebrovascularAccident\tHeartFailure\tIschaemicHeartDiseases\t" \
            "PeripheralVascularDiseases\tTransientIschaemicAttack\tType1Diabetes\tType2Diabetes\tAccidentalFall\t" \
            "Fractures\tProteinuria\tHypertension\tDiabetes"
        patientHeader = "PatientID\tDOB\tMale\t{0:s}\n".format(diseaseIndicators)
        fidPatientDetails.write(patientHeader)
        for i in patientData:
            fidPatientDetails.write("{0:s}\t{1:s}\t{2:s}\t{3:s}\n".format(
                i, patientData[i]["DOB"], patientData[i]["Gender"], patientData[i]["Disease"]))
